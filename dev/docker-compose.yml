# docker-compose to start development in local environment

services:
  db:
    image: postgres:latest
    container_name: ra_timecard_recorder_dev_db
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: ra_timecard_recorder_dev_db
    healthcheck:
      # check if the database is already created and ready to accept connections
      test: "PGPASSWORD=root psql -U root -d 'ra_timecard_recorder_dev_db' -c 'select 1;' 2>&1 > /dev/null"
      interval: 2s

  app:
    build:
      # build container using the context of the project root
      context: ..
    container_name: ra_timecard_recorder_dev_app
    volumes:
      - type: bind
        source: ..
        target: /app
    # note that working_dir below overrides WORKDIR in Dockerfile
    working_dir: /app
    links:
      - db:db
    environment:
      DB_USERNAME: root
      DB_PASSWORD: root
      DB_HOST: db
      DB_NAME: ra_timecard_recorder_dev_db
      UV_PROJECT_ENVIRONMENT: /venv # create virtual environment in /venv inside the container
    depends_on:
      db:
        condition: service_healthy
    tty: true
    stdin_open: true
    # note that command below overrides CMD in Dockerfile
    command: [ "uv", "run", "./run.py", "--botconfig", "./config/bot_config.json", "--slackconfig", "./config/slack_secret_config.json", "--bot_verbose", "--db_verbose" ]
